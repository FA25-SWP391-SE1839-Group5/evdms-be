// <auto-generated />
using System;
using EVDMS.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EVDMS.DataAccessLayer.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            Address = "123 Lê Lợi, Quận 1, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "an.nguyen@email.com",
                            FullName = "Nguyễn Văn An",
                            Phone = "0901234567",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            Address = "456 Nguyễn Trãi, Quận 5, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ngoc.tran@email.com",
                            FullName = "Trần Thị Bích Ngọc",
                            Phone = "0912345678",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            Address = "789 Cách Mạng Tháng 8, Quận 10, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "tuan.le@email.com",
                            FullName = "Lê Minh Tuấn",
                            Phone = "0923456789",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            Address = "321 Điện Biên Phủ, Quận Bình Thạnh, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "huy.pham@email.com",
                            FullName = "Phạm Quang Huy",
                            Phone = "0934567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            Address = "654 Võ Văn Tần, Quận 3, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "lan.vo@email.com",
                            FullName = "Võ Thị Mai Lan",
                            Phone = "0945678901",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Dealer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_dealers");

                    b.ToTable("dealers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            Address = "100 Nguyen Van Cu, District 1, Ho Chi Minh City",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "EV Motors Saigon",
                            Region = "Ho Chi Minh City",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.DealerContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal>("OutstandingDebt")
                        .HasColumnType("numeric")
                        .HasColumnName("outstanding_debt");

                    b.Property<decimal>("SalesTarget")
                        .HasColumnType("numeric")
                        .HasColumnName("sales_target");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_dealer_contracts");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_dealer_contracts_dealer_id");

                    b.ToTable("dealer_contracts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            OutstandingDebt = 50000m,
                            SalesTarget = 1000000m,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            EndDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            OutstandingDebt = 25000m,
                            SalesTarget = 750000m,
                            StartDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_feedbacks_customer_id");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_feedbacks_dealer_id");

                    b.ToTable("feedbacks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000001"),
                            Content = "Great service and friendly staff!",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "New",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000002"),
                            Content = "Quick response to my queries.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000002"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Reviewed",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-000000000003"),
                            Content = "Had some issues with paperwork, but resolved.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000003"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Resolved",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.OemInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variant_id");

                    b.HasKey("Id")
                        .HasName("pk_oem_inventories");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_oem_inventories_variant_id");

                    b.ToTable("oem_inventories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 10,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111101")
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 5,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111102")
                        },
                        new
                        {
                            Id = new Guid("50000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Quantity = 8,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("22222222-2222-2222-2222-222222222201")
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<Guid>("SalesOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sales_order_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("SalesOrderId")
                        .HasDatabaseName("ix_payments_sales_order_id");

                    b.ToTable("payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000001"),
                            Amount = 500000m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Method = "BankTransfer",
                            SalesOrderId = new Guid("90000000-0000-0000-0000-000000000001"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("a0000000-0000-0000-0000-000000000002"),
                            Amount = 750000m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Method = "Cash",
                            SalesOrderId = new Guid("90000000-0000-0000-0000-000000000002"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percent");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_promotions");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_promotions_dealer_id");

                    b.ToTable("promotions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Spring Sale: 10% off all vehicles!",
                            DiscountPercent = 10m,
                            EndDate = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Oem",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("60000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Description = "Year-end Clearance: 15% off selected models!",
                            DiscountPercent = 15m,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Dealer",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quotations");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_quotations_customer_id");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_quotations_dealer_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_quotations_user_id");

                    b.ToTable("quotations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Sent",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("20000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("70000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000002"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Approved",
                            TotalAmount = 0m,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("20000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.SalesOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid")
                        .HasColumnName("quotation_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_sales_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_sales_orders_customer_id");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_sales_orders_dealer_id");

                    b.HasIndex("QuotationId")
                        .HasDatabaseName("ix_sales_orders_quotation_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sales_orders_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_sales_orders_vehicle_id");

                    b.ToTable("sales_orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            Date = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            QuotationId = new Guid("70000000-0000-0000-0000-000000000001"),
                            Status = "Pending",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("20000000-0000-0000-0000-000000000002"),
                            VehicleId = new Guid("80000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("90000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000002"),
                            Date = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            QuotationId = new Guid("70000000-0000-0000-0000-000000000002"),
                            Status = "Confirmed",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("20000000-0000-0000-0000-000000000003"),
                            VehicleId = new Guid("80000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.TestDrive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_test_drives");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_test_drives_customer_id");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_test_drives_dealer_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_test_drives_vehicle_id");

                    b.ToTable("test_drives", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            ScheduledAt = new DateTime(2024, 4, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Scheduled",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = new Guid("80000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("b0000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CustomerId = new Guid("10000000-0000-0000-0000-000000000002"),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            ScheduledAt = new DateTime(2024, 5, 15, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Completed",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = new Guid("80000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<DateTime?>("PasswordResetTokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_token_expires_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_users_dealer_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            IsActive = false,
                            PasswordHash = "$2a$11$nAccBp1/4t.CxdEBKLXSp.cM3DcozB5b.itLdNwAYPYx/El1ENIdW",
                            Role = "Admin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Email = "dealermanager@example.com",
                            FullName = "Dealer Manager User",
                            IsActive = false,
                            PasswordHash = "$2a$11$DdO35yfXHIifSg.NNvGoEuTw04wZosGk4nSZuuQDYI73T.YbRM56K",
                            Role = "DealerManager",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Email = "dealerstaff@example.com",
                            FullName = "Dealer Staff User",
                            IsActive = false,
                            PasswordHash = "$2a$11$BIDX9UfH9hf91sM8KXg87upxxbcYLXYC/mKIeen0hkNvFY94h15Sq",
                            Role = "DealerStaff",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "evmstaff@example.com",
                            FullName = "EVM Staff User",
                            IsActive = false,
                            PasswordHash = "$2a$11$RQaQvAyAEnDiAved/V5wzOQGwKG3CTmDiWa7uxTBlvR2IUUZ06pWm",
                            Role = "EvmStaff",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("DealerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("variant_id");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("DealerId")
                        .HasDatabaseName("ix_vehicles_dealer_id");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_vehicles_variant_id");

                    b.HasIndex("Vin")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_vin");

                    b.ToTable("vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000001"),
                            Color = "White",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Available",
                            Type = "Sale",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111101"),
                            Vin = "5YJYGDEE8LF000001"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000002"),
                            Color = "Black",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Reserved",
                            Type = "Display",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111102"),
                            Vin = "5YJYGDEE8LF000002"
                        },
                        new
                        {
                            Id = new Guid("80000000-0000-0000-0000-000000000003"),
                            Color = "Blue",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DealerId = new Guid("30000000-0000-0000-0000-000000000001"),
                            Status = "Reserved",
                            Type = "Demo",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VariantId = new Guid("22222222-2222-2222-2222-222222222201"),
                            Vin = "5YJ3E1EA7LF000003"
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_models");

                    b.ToTable("vehicle_models", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A battery-electric compact crossover SUV that shares many components with the Model 3, offering more utility, a higher seating position, and optional three-row seating.",
                            ImageUrl = "https://res.cloudinary.com/dchtww9gf/image/upload/v1758450497/Tesla_Model_Y_m9txrs.jpg",
                            Name = "Tesla Model Y",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A battery-electric mid-size sedan with a fastback body style, marketed as a more affordable electric vehicle than Tesla's previous models.",
                            ImageUrl = "https://res.cloudinary.com/dchtww9gf/image/upload/v1758450495/Tesla_Model_3_evqd0p.jpg",
                            Name = "Tesla Model 3",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.VehicleVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("base_price");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("features");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Specs")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("specs");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_variants");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_vehicle_variants_model_id");

                    b.ToTable("vehicle_variants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111101"),
                            BasePrice = 46630m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Features = "{\"Safety\":[\"AutomaticEmergencyBraking\",\"BlindSpotMonitor\",\"LaneDepartureWarning\",\"BackupCamera\"],\"Convenience\":[\"KeylessEntry\",\"PowerLiftgate\",\"AdaptiveCruiseControl\"],\"Entertainment\":[\"AppleCarPlay\",\"AndroidAuto\",\"PremiumSoundSystem\",\"WifiHotspot\"],\"Exterior\":[\"AlloyWheels\",\"LedHeadlights\",\"RoofRails\",\"Sunroof\"],\"Seating\":[\"HeatedSeats\",\"VentilatedSeats\",\"ThirdRowSeating\"]}",
                            ModelId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Tesla Model Y Long Range All-Wheel Drive",
                            Specs = "{\"Horsepower\":{\"Value\":514,\"Unit\":\"hp\"},\"Torque\":{\"Value\":493,\"Unit\":\"Nm\"},\"Acceleration\":{\"Value\":4.8,\"Unit\":\"s\"},\"DriveType\":{\"Value\":\"AWD\",\"Unit\":null},\"MotorType\":{\"Value\":\"Dual PMSM\",\"Unit\":null},\"TopSpeed\":{\"Value\":201,\"Unit\":\"km/h\"},\"CurbWeight\":{\"Value\":1994,\"Unit\":\"kg\"},\"BatteryCapacity\":{\"Value\":75,\"Unit\":\"kWh\"},\"Range\":{\"Value\":533,\"Unit\":\"km\"},\"Efficiency\":{\"Value\":165,\"Unit\":\"Wh/km\"},\"BatteryChemistry\":{\"Value\":\"Li\\u2011ion (NCM)\",\"Unit\":null},\"BatteryVoltageArchitecture\":{\"Value\":345,\"Unit\":\"V\"},\"RegenerativeBrakingCapacity\":{\"Value\":\"Standard (1\\u2011pedal)\",\"Unit\":null},\"MaxAcChargingRate\":{\"Value\":11,\"Unit\":\"kW\"},\"MaxDcFastChargingRate\":{\"Value\":250,\"Unit\":\"kW\"},\"DcFastChargingTime\":{\"Value\":27,\"Unit\":\"min\"},\"AcChargingTime\":{\"Value\":8,\"Unit\":\"h\"},\"ChargingPortTypes\":{\"Value\":\"Tesla NACS (NA) / CCS (EU)\",\"Unit\":null},\"TowingCapacity\":{\"Value\":1600,\"Unit\":\"kg\"},\"FrunkVolume\":{\"Value\":117,\"Unit\":\"L\"},\"CargoVolume\":{\"Value\":854,\"Unit\":\"L\"},\"HeatPump\":{\"Value\":\"Standard\",\"Unit\":null},\"V2lCapability\":{\"Value\":3.6,\"Unit\":\"kW\"}}",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111102"),
                            BasePrice = 57000m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Features = "{\"Safety\":[\"AutomaticEmergencyBraking\",\"BlindSpotMonitor\",\"LaneDepartureWarning\",\"BackupCamera\"],\"Convenience\":[\"KeylessEntry\",\"PowerLiftgate\",\"AdaptiveCruiseControl\"],\"Entertainment\":[\"AppleCarPlay\",\"AndroidAuto\",\"PremiumSoundSystem\",\"WifiHotspot\"],\"Exterior\":[\"AlloyWheels\",\"LedHeadlights\",\"RoofRails\",\"Sunroof\"],\"Seating\":[\"HeatedSeats\",\"ThirdRowSeating\"]}",
                            ModelId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Tesla Model Y Performance",
                            Specs = "{\"Horsepower\":{\"Value\":534,\"Unit\":\"hp\"},\"Torque\":{\"Value\":660,\"Unit\":\"Nm\"},\"Acceleration\":{\"Value\":3.7,\"Unit\":\"s\"},\"DriveType\":{\"Value\":\"AWD\",\"Unit\":null},\"MotorType\":{\"Value\":\"Dual PMSM Performance\",\"Unit\":null},\"TopSpeed\":{\"Value\":250,\"Unit\":\"km/h\"},\"CurbWeight\":{\"Value\":2003,\"Unit\":\"kg\"},\"BatteryCapacity\":{\"Value\":78,\"Unit\":\"kWh\"},\"Range\":{\"Value\":488,\"Unit\":\"km\"},\"Efficiency\":{\"Value\":175,\"Unit\":\"Wh/km\"},\"BatteryChemistry\":{\"Value\":\"Li\\u2011ion (NCA)\",\"Unit\":null},\"BatteryVoltageArchitecture\":{\"Value\":355,\"Unit\":\"V\"},\"RegenerativeBrakingCapacity\":{\"Value\":\"Enhanced (1\\u2011pedal)\",\"Unit\":null},\"MaxAcChargingRate\":{\"Value\":11,\"Unit\":\"kW\"},\"MaxDcFastChargingRate\":{\"Value\":250,\"Unit\":\"kW\"},\"DcFastChargingTime\":{\"Value\":25,\"Unit\":\"min\"},\"AcChargingTime\":{\"Value\":7.5,\"Unit\":\"h\"},\"ChargingPortTypes\":{\"Value\":\"Tesla NACS (NA) / CCS (EU)\",\"Unit\":null},\"TowingCapacity\":{\"Value\":1500,\"Unit\":\"kg\"},\"FrunkVolume\":{\"Value\":110,\"Unit\":\"L\"},\"CargoVolume\":{\"Value\":860,\"Unit\":\"L\"},\"HeatPump\":{\"Value\":\"Standard\",\"Unit\":null},\"V2lCapability\":{\"Value\":3.6,\"Unit\":\"kW\"}}",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222201"),
                            BasePrice = 54990m,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Features = "{\"Safety\":[\"AutomaticEmergencyBraking\",\"LaneDepartureWarning\",\"BackupCamera\"],\"Convenience\":[\"KeylessEntry\",\"PowerLiftgate\"],\"Entertainment\":[\"PremiumSoundSystem\"],\"Exterior\":[\"LedHeadlights\",\"AlloyWheels\"],\"Seating\":[\"HeatedSeats\"]}",
                            ModelId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Tesla Model 3 Performance",
                            Specs = "{\"Horsepower\":{\"Value\":510,\"Unit\":\"hp\"},\"Torque\":{\"Value\":660,\"Unit\":\"Nm\"},\"Acceleration\":{\"Value\":3.1,\"Unit\":\"s\"},\"DriveType\":{\"Value\":\"AWD\",\"Unit\":null},\"MotorType\":{\"Value\":\"Dual PMSM\",\"Unit\":null},\"TopSpeed\":{\"Value\":261,\"Unit\":\"km/h\"},\"CurbWeight\":{\"Value\":1844,\"Unit\":\"kg\"},\"BatteryCapacity\":{\"Value\":82,\"Unit\":\"kWh\"},\"Range\":{\"Value\":547,\"Unit\":\"km\"},\"Efficiency\":{\"Value\":153,\"Unit\":\"Wh/km\"},\"BatteryChemistry\":{\"Value\":\"Li\\u2011ion (NCA)\",\"Unit\":null},\"BatteryVoltageArchitecture\":{\"Value\":355,\"Unit\":\"V\"},\"RegenerativeBrakingCapacity\":{\"Value\":\"Standard (1\\u2011pedal)\",\"Unit\":null},\"MaxAcChargingRate\":{\"Value\":11,\"Unit\":\"kW\"},\"MaxDcFastChargingRate\":{\"Value\":250,\"Unit\":\"kW\"},\"DcFastChargingTime\":{\"Value\":30,\"Unit\":\"min\"},\"AcChargingTime\":{\"Value\":8,\"Unit\":\"h\"},\"ChargingPortTypes\":{\"Value\":\"Tesla NACS (NA) / CCS (EU)\",\"Unit\":null},\"TowingCapacity\":{\"Value\":1000,\"Unit\":\"kg\"},\"FrunkVolume\":{\"Value\":88,\"Unit\":\"L\"},\"CargoVolume\":{\"Value\":542,\"Unit\":\"L\"},\"HeatPump\":{\"Value\":null,\"Unit\":null},\"V2lCapability\":{\"Value\":null,\"Unit\":null}}",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.DealerContract", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("DealerContracts")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dealer_contracts_dealers_dealer_id");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Feedback", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_customers_customer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_feedbacks_dealers_dealer_id");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.OemInventory", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("OemInventories")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_oem_inventories_vehicle_variants_variant_id");

                    b.Navigation("VehicleVariant");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Payment", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.SalesOrder", "SalesOrder")
                        .WithMany("Payments")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payments_sales_orders_sales_order_id");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Promotion", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("Promotions")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_promotions_dealers_dealer_id");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_customers_customer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("Quotations")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_dealers_dealer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.User", "User")
                        .WithMany("Quotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_users_user_id");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.RefreshToken", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.SalesOrder", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_orders_customers_customer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_orders_dealers_dealer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Quotation", "Quotation")
                        .WithMany("SalesOrders")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_orders_quotations_quotation_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.User", "User")
                        .WithMany("SalesOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_orders_users_user_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Vehicle", "Vehicle")
                        .WithMany("SalesOrders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sales_orders_vehicles_vehicle_id");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Quotation");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.TestDrive", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Customer", "Customer")
                        .WithMany("TestDrives")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_drives_customers_customer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("TestDrives")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_drives_dealers_dealer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.Vehicle", "Vehicle")
                        .WithMany("TestDrives")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_test_drives_vehicles_vehicle_id");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.User", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("Users")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_dealers_dealer_id");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Vehicle", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.Dealer", "Dealer")
                        .WithMany("Vehicles")
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_dealers_dealer_id");

                    b.HasOne("EVDMS.DataAccessLayer.Entities.VehicleVariant", "VehicleVariant")
                        .WithMany("Vehicles")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_vehicle_variants_variant_id");

                    b.Navigation("Dealer");

                    b.Navigation("VehicleVariant");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.VehicleVariant", b =>
                {
                    b.HasOne("EVDMS.DataAccessLayer.Entities.VehicleModel", "VehicleModel")
                        .WithMany("VehicleVariants")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_variants_vehicle_models_model_id");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Quotations");

                    b.Navigation("SalesOrders");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Dealer", b =>
                {
                    b.Navigation("DealerContracts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Promotions");

                    b.Navigation("Quotations");

                    b.Navigation("SalesOrders");

                    b.Navigation("TestDrives");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Quotation", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.SalesOrder", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.User", b =>
                {
                    b.Navigation("Quotations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.Vehicle", b =>
                {
                    b.Navigation("SalesOrders");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.VehicleModel", b =>
                {
                    b.Navigation("VehicleVariants");
                });

            modelBuilder.Entity("EVDMS.DataAccessLayer.Entities.VehicleVariant", b =>
                {
                    b.Navigation("OemInventories");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
